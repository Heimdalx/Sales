@page "/countries/details/{Id:int}"
@inject IRepository repository;
@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;

<h3>Country Details</h3>

@if (country is null)
{
    <GenericLoading />
}
else
{

    <h3>@country.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/states/create/@country.Id">Nuevo estado/departamento</a>
        <a class="btn btn-success" href="/countries">Regresar</a>
    </div>

    <GenericList MyList="states">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Estados / Departamentos</th>
                        <th>Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@state.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id">Editar</a>
                                <button class="btn btn-danger" @onclick="@(() => DeleteAsync(state))">Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}


@code {
    private Country? country;
    private List<State>? states;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await LoadingAsync();
    }

    public async Task DeleteAsync(State state)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro de eliminar el estado / departamento {state.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"api/states/{state.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

        }

        await LoadingAsync();
        await sweetAlertService.FireAsync("Completado", $"El estado / departamento {state.Name} se eliminó correctamente", SweetAlertIcon.Success);

    }

    private async Task LoadingAsync()
    {


        var responseHttp = await repository.Get<Country>($"/api/countries/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        country = responseHttp.Response;
        states = country!.States!.ToList();
    }

}
