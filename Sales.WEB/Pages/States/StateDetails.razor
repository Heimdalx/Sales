@page "/states/details/{StateId:int}"
@inject IRepository repository;
@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;


@if (state is null)
{
    <GenericLoading />
}
else
{

    <h3>@state.Name</h3>

    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div>
            <a class="btn btn-primary" href="/cities/create/@state.Id">Nueva ciudad</a>
            <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>
        </div>
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar ciudad" @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
        </div>
    </div>

    <Pagination CurrentPage="currentePage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

    <GenericList MyList="cities">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in cities)
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td>
                                <a class="btn btn-warning" href="/cities/edit/@city.Id">Editar</a>
                                <button class="btn btn-danger" @onclick="@(() => DeleteAsync(city))">Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}


@code {

    [Parameter]
    public int StateId { get; set; }

    private State? state;
    private List<City>? cities;
    private int currentePage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        await LoadingAsync();
    }

    private async Task LoadingAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
             url1 = $"api/cities?id={StateId}&page={page}";
             url2 = $"api/cities/totalPages?id={StateId}";
        }
        else
        {

             url1 = $"api/cities?id={StateId}&page={page}&filter={Filter}";
             url2 = $"api/cities/totalPages?id={StateId}&filter={Filter}";
        }


        var responseHppt = await repository.Get<State>($"api/states/{StateId}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt.Response!;
        cities = responseHppt2.Response!;
        totalPages = responseHppt3.Response!;

    }

    public async Task DeleteAsync(City city)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro de eliminar la ciudad {city.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"api/cities/{city.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

        }

        await LoadingAsync();
        await sweetAlertService.FireAsync("Completado", $"La ciudad {city.Name} se eliminó correctamente", SweetAlertIcon.Success);

    }

    private async Task SelectedPageAsync(int page)
    {
        currentePage = page;
        await LoadingAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        await LoadingAsync(1);
        await SelectedPageAsync(1);
    }
}
