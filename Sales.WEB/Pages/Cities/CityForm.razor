@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Ciudad:</label>
        <div>
            <InputText class="form-control" @bind-Value="@City.Name" />
            <ValidationMessage For="@(() => City.Name)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar cambios</button>
    <button class="btn btn-success" @onclick="OnReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public City City { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback OnReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(City);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (editContext.IsModified() && !FormPostedSuccessfully)
        {
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = "¿Quiere descartar los cambios?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "No",
                    ConfirmButtonText = "Sí"
                });

            var confirm = !string.IsNullOrEmpty(result.Value);
            if (confirm)
            {
                return;
            }

            context.PreventNavigation();
        }
    }

}
